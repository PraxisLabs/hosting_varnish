<?php
/**
 * @file
 * Integrates hosted sites with Varnish cache.
 */

/**
 * Implements hook_perm().
 */
function hosting_varnish_perm() {
  return array('purge varnish cache', 'configure default varnish settings');
}

/**
 * Implements hook_menu().
 */
function hosting_varnish_menu() {
  $items = array();

  $items['node/%node/hosting-varnish'] = array(
    'title' => 'Varnish cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_varnish_node_purge_cache', 1),
    'access callback' => 'hosting_varnish_check_valid_site',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  $items['node/%node/hosting-varnish-platform'] = array(
    'title' => 'Varnish settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_varnish_platform_settings', 1),
    'access callback' => 'hosting_varnish_check_valid_platform',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

// This doesn't work until cache clear?
  if (hosting_feature('varnish')) {
    $items['admin/hosting/varnish'] = array(
      'title' => 'Varnish integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hosting_varnish_settings_form'),
      'access arguments' => array('administer varnish'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'hosting_varnish.admin.inc',
    );
  }

  return $items;
}

/**
 * Checks if node is site and on live server (and user has purge permission).
 */
function hosting_varnish_check_valid_site($site) {
  if (!hosting_feature('varnish')) {
    return FALSE;
  }

  if (!user_access('purge varnish cache')) {
    return FALSE;
  }
              
  if ($site->type != 'site') {
    return FALSE;
  }

  $web_servers = array();
  if (hosting_feature('server')) {
    $web_servers = variable_get('hosting_varnish_web_servers', array());
  }
  if (empty($web_servers) || ($platform = node_load($site->platform)) && in_array($platform->web_server, $web_servers)) {
    return TRUE;
  }

  return FALSE;
}

function hosting_varnish_check_valid_platform($platform) {
  if (!hosting_feature('varnish')) {
    return FALSE;
  }

  if (!user_access('configure default varnish settings')) {
    return FALSE;
  }

  // Only support Drupal 7
  if (substr($platform->release->version_code, 0, 1) != '7') {
    return FALSE;
  }

  if ($platform->type != 'platform') {
    return FALSE;
  }

  $web_servers = array();
  if (hosting_feature('server')) {
    $web_servers = variable_get('hosting_varnish_web_servers', array());
  }
  if (empty($web_servers) || in_array($platform->web_server, $web_servers)) {
    return TRUE;
  }

  return FALSE;
}

function hosting_varnish_platform_settings($form_state, $platform) {
  $form = array();

  $nid = $platform->nid;

  $form['hosting_varnish_clear_cache' . '_' . $nid] = array(
    '#type' => 'fieldset',
    '#title' => t('Clear cache'),
  );

  $form['hosting_varnish_caching' . '_' . $nid] = array(
    '#type' => 'fieldset',
    '#title' => t('Caching'),
  );

//  $cache = variable_get('cache', 0);
  $cache = variable_get('hosting_varnish_cache' . '_' . $nid, TRUE);
  $form['caching']['hosting_varnish_cache' . '_' . $nid] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache pages for anonymous users'),
    '#default_value' => $cache,
    '#weight' => -2,
  );
  $period = drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $period[0] = '<' . t('none') . '>';
  $form['caching']['hosting_varnish_cache_lifetime' . '_' . $nid] = array(
    '#type' => 'select',
    '#title' => t('Minimum cache lifetime'),
    '#default_value' => variable_get('hosting_varnish_cache_lifetime' . '_' . $nid, 0),
    '#options' => $period,
    '#description' => t('Cached pages will not be re-created until at least this much time has elapsed.')
  );
  $form['caching']['hosting_varnish_page_cache_maximum_age' . '_' . $nid] = array(
    '#type' => 'select',
    '#title' => t('Expiration of cached pages'),
    '#default_value' => variable_get('hosting_varnish_page_cache_maximum_age' . '_' . $nid, 0),
    '#options' => $period,
    '#description' => t('The maximum time an external cache can use an old version of a page.')
  );

  $form['bandwidth_optimization' . '_' . $nid] = array(
    '#type' => 'fieldset',
    '#title' => t('Bandwidth optimization'),
    '#description' => t('External resources can be optimized automatically, which can reduce both the size and number of requests made to your website.'),
  );

  $form['bandwidth_optimization']['hosting_varnish_page_compression' . '_' . $nid] = array(
    '#type' => 'checkbox',
    '#title' => t('Compress cached pages.'),
    '#default_value' => variable_get('hosting_varnish_page_compression' . '_' . $nid, TRUE),
    '#prefix' => '<div id="page-compression-wrapper">',
    '#suffix' => '</div>',
  );

  $form['bandwidth_optimization']['hosting_varnish_preprocess_css' . '_' . $nid] = array(
    '#type' => 'checkbox',
    '#title' => t('Aggregate and compress CSS files.'),
    '#default_value' => variable_get('hosting_varnish_preprocess_js' . '_' . $nid, 0),
  );

  $form['bandwidth_optimization']['hosting_varnish_preprocess_js' . '_' . $nid] = array(
    '#type' => 'checkbox',
    '#title' => t('Aggregate JavaScript files.'),
    '#default_value' => variable_get('hosting_varnish_preprocess_css' . '_' . $nid, 0),
  );

  return system_settings_form($form);
}

/**
 * Purges cache for a site.
 */
function hosting_varnish_node_purge_cache($form_state, $site) {
  $form = array();

  if (!hosting_varnish_ready()) {
    $form['error']['message'] = array(
      '#value' => '<p><em>' . t('One or more Varnish servers are down.') . '</em></p>',
    );
    if (user_access('administer varnish')) {
      $form['error']['varnish_status'] = array(
        '#value' => theme('varnish_status', varnish_get_status(), floatval(variable_get('varnish_version', 2.1))),
      );
      $form['error']['varnish_link'] = array(
        '#value' => t('Configure !settings_link.', array('!settings_link' => l(t('Varnish settings'), 'admin/settings/varnish'))),
      );
    }
  }
  else {
    $names = array($site->title);
    if (hosting_feature('alias')) {
      $names = array_merge($names, hosting_alias_get_aliases($site));
    }

    $form['hostname'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Host names'),
      '#options' => array_combine($names, $names),
      '#required' => TRUE,
      '#description' => t('Select the host names for this site to purge the Varnish cache for.'),
    );
    $form['url'] = array(
      '#type' => 'textfield',
      '#title' => t('URL path'),
      '#default_value' => '/',
      '#description' => t('Purge cache matching this URL. If the path is empty, all cache for the select host names will be purged.'),
    );
    $form['regexp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Regular expression'),
    );
    $form['regexp']['url_regexp'] = array(
      '#type' => 'checkbox',
      '#title' => t('Regular expression'),
      '#default_value' => FALSE,
      '#description' => t('Use the specified URL path as a regular expression pattern. %nb', array('%nb' => t('N.B. Remember to use caret (^) and dollar sign ($) characters to signify start and end of string to avoid unnecessarily matching strings containing the pattern.'))),
    );
    $form['regexp']['url_regexp_ci'] = array(
      '#type' => 'checkbox',
      '#title' => t('Case-insensitive'),
      '#default_value' => FALSE,
      '#description' => t('Whether to match case insensitive characters using the pattern.'),
    );

    $confirm_description = t('Purging the cache for the specified host names and path will cause the next pageview to trigger a Drupal page request. Are you sure you understand and still wish to continue?');
    return confirm_form($form, t('Purge Varnish cache'), 'node/' . $site->nid . '/hosting-varnish', $confirm_description, t('Purge'));
  }

  return $form;
}

/**
 * Checks various configuration and determines whether Varnish can correctly respond.
 */
function hosting_varnish_ready() {
  $status = varnish_get_status();
  return !empty($status) && !in_array(VARNISH_SERVER_STATUS_DOWN, varnish_get_status(), TRUE);
}

/**
 * Validates purge form.
 */
function hosting_varnish_node_purge_cache_validate($form, &$form_state) {
  // Validate regular expression.
  if (!empty($form_state['values']['url_regexp']) && $form_state['values']['url'] !== '') {
    $pattern = $form_state['values']['url'];
    $pattern_suffix = empty($form_state['values']['url_regexp_ci']) ? '' : 'i';
    // Check pattern for the "`" character.
    $pattern = str_replace('`', '\`', $pattern);
    // Test pattern.
    $full_pattern = "`$pattern`$pattern_suffix";
    if (FALSE === @preg_match($full_pattern, '')) {
      form_set_error('url', t('The specified regular expression pattern is invalid.'));
    }
  }
}

/**
 * Purges cache.
 */
function hosting_varnish_node_purge_cache_submit($form, &$form_state) {
  $hostname = $form_state['values']['hostname'];
  $url = $form_state['values']['url'];
  $url_regexp = $form_state['values']['url_regexp'];
  $url_regexp_ci = $form_state['values']['url_regexp_ci'];

  // Construct pattern.
  $pattern = '';
  if ($url === '') {
    $pattern = '.?';
  }
  elseif ($url_regexp) {
    $pattern = ($url_regexp_ci ? '(?i)' : '') . $url;
  }
  else {
    $pattern = '^' . preg_quote($url) . '$';
  }

  // Purge cache.
  foreach (array_filter($hostname) as $name) {
    varnish_purge($name, $pattern);
  }

  drupal_set_message(t('The specified Varnish cache has been successfully purged.'));
}
